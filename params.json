{
  "name": "Fall2016-project-davidlevitsky",
  "tagline": "fall2016-project-davidlevitsky created by GitHub Classroom",
  "body": "\r\n### FriendsConnect\r\nThis project was developed by David Levitsky at California Polytechnic State University, San Luis Obispo, as part of CPE 305 - Individual Software Design and Development.\r\n\r\n### Background\r\nConnecting with others has become a big focus in today's fast-paced day and age. While there are many different applications to help facilitate interactions between two different users, they all operate separately and on their own premise. This application strives to integrate pre-existing services using developer API's to allow users to schedule events with their friends in a simpler and quicker manner than the status quo. After all, when our smartphones have more capabilities than the computers that landed us on the Moon, shouldn't inviting a friend out be a breeze?\r\n\r\nSome key features:\r\n* Calendar view\r\n* Yelp Search Integration\r\n* E-Mail Notification\r\n* Dynamic Upcoming Schedule Viewer\r\n* History of Past Events\r\n* Feedback Mechanism for Previous Events\r\n\r\n\r\n### Creating pages manually\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Basic Walkthrough\r\nMain Screen\r\n\r\n### Creating an Event\r\nCreating an Event\r\n\r\n### Using Yelp\r\nIf you're not sure about a good place to venture with a friend, whether it be for a dinner, museum, or a run, FriendsConnect provides simple access to Yelp without forcing you to open up a separate application. Simply type in a search term, like \"dinner\", and your preferred location, such as \"San Francisco\", and choose from generated results!\r\n\r\n### Viewing Additional Details\r\nYou can click on the information button under the image of each result to view additional details, such as address and number of user reviews.\r\n\r\n### Confirming Your Event\r\nTo select a location, click on the checkmark under the image of the Yelp result you wish to select. Upon returning to the page you were originally at to create an event, edit any other details you wish and click \"SAVE\".\r\n\r\n### E-Mail Notification\r\nAn automatically generated e-mail will be composed for you, and you will be directed to the e-mail service you use on your phone. Edit any details you wish, and click send to notify your invitee! Their e-mail address will already be typed in for you.\r\n\r\n### That's it!\r\nYou will receive a brief popup confirming the scheduling of your event, and it should now appear on your schedule of Upcoming Events. Click on a different day on the Calendar to have it adjust the daily schedule of Upcoming Events based on the selected date.\r\n\r\n### Rate Your Previous Experiences\r\nAfter attending an event, you can click the star on the home page to be taken to a list of past events. Use the feedback feature of thumbs up / thumbs down so you can remember your experience for the future!\r\n\r\n### Technical Details\r\n\r\n<b> High-Level Architecture <b>\r\n\r\nAndroid operates on a Model-View-Presenter architecture. This architecture is highly effective because screens could change at any time, based on a button press or some user input.\r\n \r\n* View is a layer that displays data and reacts to user actions. On Android, this could be an Activity, a Fragment, an android.view.View or a Dialog.\r\n* Model is a data access layer such as database API or remote server API.\r\n* Presenter is a layer that provides View with data from Model. Presenter also handles background tasks.\r\n\r\nYou can see a high-level overview below. Note that the Presenter is the only method of communication between the View and the Model, and that the two should never be able to communicate directly.\r\n\r\n![](https://github.com/cpe305/fall2016-project-davidlevitsky/blob/master/MVPGeneral.png?raw=true)\r\n\r\n<b> Design Architecture <b>\r\n\r\nHere you can see the design structure of the project, complete with class diagrams, activities, and XML files. The MVP structure was slightly modified to add a persistence layer, which is a Realm database used to store created events.\r\n\r\n![](https://github.com/cpe305/fall2016-project-davidlevitsky/blob/master/MVPOverview.png?raw=true)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}